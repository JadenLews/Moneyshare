import hashlib
import random
import csv

# def generate_seed_using_log(search_phone, filename):
#     with open(filename, 'r') as file:
#         reader = csv.DictReader(file)
#         rows_with_matching_phone = []
        
#         for row in read:
#             if row[]
        
#     return seed_number


random.seed(42)

phone_a = 1234
phone_b = 2345
transaction_amt = 20

#### Code 1 - generated by Bob: ####

#generate a 4 digit nonce        
nonce_b = random.randint(1000, 9999)

#compute a 4 digit MAC on A (phone_number), B (self), nonce_b,
#X (amount), and the log of previous transactions l

## could read and write from a text file to simulate l?
mac_b = hashlib.sha256(f"{phone_a}{phone_b}{nonce_b}{transaction_amt}".encode()).hexdigest()[:4]

# combine nonce_b and mac
code_1 = f"{nonce_b}{mac_b}"

print("Bob's Nonce:", nonce_b)
print("Bob's Mac:", mac_b)
print("Code 1:", code_1)

#### Code 1 - Entered by Alice ####

# Alice enters transaction_amt, phone_b, and code_1
# If both parties agree on transaction_amt, prev_transactions

random.seed(42)

nonce_b_reconstruction = random.randint(1000, 9999)
mac_b_reconstruction = hashlib.sha256(f"{phone_a}{phone_b}{nonce_b_reconstruction}{transaction_amt}".encode()).hexdigest()[:4]
code_1_reconstruction = f"{nonce_b_reconstruction}{mac_b_reconstruction}"

print("Bob's Nonce Reconstructed:", nonce_b_reconstruction)
print("Bob's Mac Reconstructed:", mac_b_reconstruction)
print("Code 1 Reconstructed:", code_1_reconstruction)

mac_b_boolean = False
if (code_1 == code_1_reconstruction):
    mac_b_boolean = True

print("Equivalent?:", mac_b_boolean)